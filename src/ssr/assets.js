"use strict";

const fs = require("fs/promises");
const path = require("path");

const { ChunkExtractor } = require("@loadable/server");
const { createElement } = require("react");
const { renderToString } = require("react-dom/server.node");

exports.SingleEntryRenderer = class SingleEntryRenderer {
  constructor() {
    this.htmlPath = path.join(__dirname, "../../dist/client/index.html");
    this.ssrPath = path.join(__dirname, "../../dist/server/ssr.js");
  }

  isLoaded() {
    return Boolean(this.html && this.SSR);
  }

  clearAssetsCache() {
    delete require.cache[require.resolve(this.ssrPath)];
  }

  async reloadAssets() {
    const html = (await fs.readFile(this.htmlPath)).toString();
    const render = require(this.ssrPath).default;

    this.html = html;
    this.SSR = render;
  }

  renderStaticHtml({ url, context }) {
    const partialHtml = renderToString(
      createElement(this.SSR, {
        url,
        context,
      })
    );

    return this.html.replace(
      '<div id="root">',
      `<div id="root">${partialHtml}`
    );
  }
};

exports.LazyLoadRenderer = class LazyLoadRenderer {
  constructor() {
    // This is the stats file generated by webpack loadable plugin
    this.ssrStatsFile = path.join(
      __dirname,
      "../../dist/server/loadable-stats.json"
    );
    this.csrStatsFile = path.join(
      __dirname,
      "../../dist/client/loadable-stats.json"
    );
  }

  isLoaded() {
    return Boolean(this.SSR);
  }

  clearAssetsCache() {
    const ssrFilesCache = Object.keys(require.cache).filter((name) =>
      name.includes("dist/server")
    );

    for (const ssrFile of ssrFilesCache) {
      delete require.cache[require.resolve(ssrFile)];
    }
  }

  loadAssets() {
    const nodeExtractor = new ChunkExtractor({
      statsFile: this.ssrStatsFile,
      entrypoints: ["ssr"],
    });
    const { default: SSR } = nodeExtractor.requireEntrypoint();

    this.SSR = SSR;
  }

  renderStaticHtml({ url, context }) {
    const webExtractor = new ChunkExtractor({
      statsFile: this.csrStatsFile,
      entrypoints: ["app"],
    });

    const jsx = webExtractor.collectChunks(
      createElement(this.SSR, {
        url,
        context,
      })
    );

    const html = renderToString(jsx);

    const linkTags = webExtractor.getLinkTags();
    const styleTags = webExtractor.getStyleTags();
    const scriptTags = webExtractor.getScriptTags();

    return `
      <!DOCTYPE html>
      <html>
        <head>
        ${linkTags}
        ${styleTags}
        </head>
        <body>
          <div id="root">${html}</div>
          ${scriptTags}
        </body>
      </html>
    `;
  }
};
