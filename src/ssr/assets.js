"use strict";

const fs = require("fs/promises");
const path = require("path");

const { ChunkExtractor } = require("@loadable/server");
const { createElement } = require("react");
const { renderToString } = require("react-dom/server.node");

const htmlPath = path.join(__dirname, "../../dist/client/index.html");
const ssrPath = path.join(__dirname, "../../dist/server/ssr.js");
// This is the stats file generated by webpack loadable plugin
const ssrStatsFile = path.join(
  __dirname,
  "../../dist/server/loadable-stats.json"
);
const csrStatsFile = path.join(
  __dirname,
  "../../dist/client/loadable-stats.json"
);

exports.reloadAssets = async function reloadAssets(bundle) {
  const html = (await fs.readFile(htmlPath)).toString();

  delete require.cache[require.resolve(ssrPath)];
  const render = require(ssrPath).default;
  bundle.html = html;
  bundle.SSR = render;
};

exports.reloadAssetsLazy = async function reloadAssetsLazy(bundle) {
  clearLazySSRCache();

  const nodeExtractor = new ChunkExtractor({
    statsFile: ssrStatsFile,
    entrypoints: ["ssr"],
  });
  const { default: SSR } = nodeExtractor.requireEntrypoint();

  const webExtractor = new ChunkExtractor({
    statsFile: csrStatsFile,
    entrypoints: ["app"],
  });

  bundle.webExtractor = webExtractor;
  bundle.SSR = SSR;
};

function clearLazySSRCache() {
  const ssrFilesCache = Object.keys(require.cache).filter((name) =>
    name.includes("dist/server")
  );

  for (const ssrFile of ssrFilesCache) {
    delete require.cache[require.resolve(ssrFile)];
  }
}

exports.renderHtml = function renderHtml({ html, SSR }, { url, context }) {
  const partialHtml = renderToString(
    createElement(SSR, {
      url,
      context,
    })
  );

  return html.replace('<div id="root">', `<div id="root">${partialHtml}`);
};

exports.renderHtmlLazy = function renderHtmlLazy(
  { webExtractor, SSR },
  { url, context }
) {
  const jsx = webExtractor.collectChunks(
    createElement(SSR, {
      url,
      context,
    })
  );

  return `
    <!DOCTYPE html>
    <html>
      <head>
      ${webExtractor.getLinkTags()}
      ${webExtractor.getStyleTags()}
      </head>
      <body>
        <div id="root">${renderToString(jsx)}</div>
        ${webExtractor.getScriptTags()}
      </body>
    </html>
  `;
};
